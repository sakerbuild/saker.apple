global(VERSION_saker.apple) = "0.8.0"
global(DEPENDENCIES_saker.apple) = [
	saker.standard, 
	saker.sdk.support,
	saker.process-api,
	saker.compiler.utils,
	saker.clang,
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile_native(
	in javac = compile()[javac],
	out link,
) {
	$preset = [
		{
			SimpleCompilerParameters: [
				-fno-rtti,
				-fno-exceptions,
				-mmacosx-version-min=10.7,
				-arch,
				x86_64,
				-fobjc-arc,
				-stdlib=libc++,
				-Os,
				-fvisibility=hidden,
				-fvisibility-inlines-hidden,
				-fno-common,
				-fstrict-aliasing,
				-std=c++11,
			],
			SimpleLinkerParameters: [
				-shared,
				-lc++,
				-mmacosx-version-min=10.7,
				-dead_strip,
				-fobjc-link-runtime,
				-arch,
				x86_64,
				-fobjc-arc,
				-fobjc-link-runtime,
				-stdlib=libc++,
			],
			MacroDefinitions: {
				OBJC_OLD_DISPATCH_PROTOTYPES: "0",
				NS_BLOCK_ASSERTIONS: "1",
			}	
		}
	]
	$clangcompile = saker.clang.compile(
		{
			Files: [
				src/native/**/*.mm,
				src/native/**/*.cpp,
			],
			IncludeDirectories: [
				sdk.path(Java, Identifier: include.darwin),
				sdk.path(Java, Identifier: include),
				$javac[HeaderDirectory],
			],
		},
		CompilerOptions: $preset,
		Identifier: nativelib,
		SDKs: {
			Java: saker.java.sdk()
		}
	)
	$link = saker.clang.link(
		$clangcompile,
		LinkerOptions: $preset,
		BinaryName: libappleplatform.x86_64.dylib,
	)
}
compile(
	out javac,
) {
	$resolveddependencies = nest.dependency.resolve(
		global(DEPENDENCIES_saker.apple),
		Filters: nest.dependency.filter.compile(CompileTransitive: false)
	)
	$javac = saker.java.compile(
		SourceDirectories: [
			src/main/
		],
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.nest-api-v{ static(VERSION_saker.nest) }",
				"saker.build-api-v{ static(VERSION_saker.build) }",
			]),
			saker.java.classpath.bundle($resolveddependencies),
		],
		GenerateNativeHeaders: true,	
		Identifier: "saker.apple",
	)
}
###
this target can be called on non-macOS builds
it assumes that the native library is present at build/libappleplatform.x86_64.dylib
###
export_local(
	out export,
) {
	$export = export(nativelibpath: build/libappleplatform.x86_64.dylib)
}
export(
	in compile = compile(),
	in nativelibpath = compile_native(javac: $compile[javac])[link][OutputPath]
	out compile,
	out mainjar,
	out apijar,
	out impljar,
	out sourcejar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
	]
) {
	$mainjar = saker.jar.create(
		Output: saker.apple.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/apple/main/**,
			},
			{
				Directory: main/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.apple-v{ global(VERSION_saker.apple) }",
				Nest-Bundle-Source: "saker.apple-sources-v{ global(VERSION_saker.apple) }",
				Nest-ClassPath-Supported-Repository-Versions: "[0.8.6)",
				Nest-ClassPath-Supported-Build-System-Versions: "[0.8.9)",
			},
		},
	)
	$apijar = saker.jar.create(
		Output: saker.apple-api.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/apple/api/**,
			},
			{
				Directory: api/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.apple-api-v{ global(VERSION_saker.apple) }",
				Nest-Bundle-Source: "saker.apple-sources-v{ global(VERSION_saker.apple) }",
				Nest-ClassPath-Supported-Repository-Versions: "[0.8.6)",
				Nest-ClassPath-Supported-Build-System-Versions: "[0.8.9)",
			},
		},
	)
	$impljar = saker.jar.create(
		Output: saker.apple-impl.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/apple/impl/**,
			},
			{
				Directory: impl/resources/,
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
			$nativelibpath,
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.apple-impl-v{ global(VERSION_saker.apple) }",
				Nest-Bundle-Source: "saker.apple-sources-v{ global(VERSION_saker.apple) }",
				Nest-ClassPath-Supported-Repository-Versions: "[0.8.6)",
				Nest-ClassPath-Supported-Build-System-Versions: "[0.8.9)",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.apple-sources.jar,
		Resources: [
			{
				Directory: [src/main/],
				Resources: [**/*.java],
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.apple-sources-v{ global(VERSION_saker.apple) }",
			},
		},
	)
}
install_local() {
	install(export: export_local()[export])
}
install(
	in export = export()
) {
	nest.local.install($export[bundlepaths])
}

upload(
	in export = export()
) {
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(saker.apple.UPLOAD_API_KEY),
		APISecret: global(saker.apple.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}
upload_local() {
	upload(export: export_local()[export])
}

test_internals() {
	$compile = compile()
	
	$testcompile = saker.java.compile(
		SourceDirectories: test/src/,
		ClassPath: [
			$compile[javac][ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.build-test-v{ static(VERSION_saker.build) }",
			]),
		],
		Identifier: "tests",
	)
	$dependencybundles = foreach $bundle in nest.dependency.resolve(global(DEPENDENCIES_saker.apple))[Bundles] : [$bundle[BundleIdentifier]]
	saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$compile[javac][ClassDirectory]
			saker.java.classpath.bundle([
				"saker.build-test-v{ static(VERSION_saker.build) }",
			] + $dependencybundles)
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath: [
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			])
		],
		TestClasses: [
			testing.saker.apple.**.*Test
		],
		#ProcessJVMParameters: [ "-agentlib:jdwp=transport=dt_socket,address=localhost:5432,server=y,suspend=y,quiet=y" ],
		NonDeterministicTests: **,
		TestInvokerParameters: {
			TimeoutMillis: 60000,
		},
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}